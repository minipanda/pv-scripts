#!/bin/sh
#
# Copyright IBM, Corp. 2010  
#
# Authors:
#  Anthony Liguori <aliguori@us.ibm.com>
#
# This work is licensed under the terms of the GNU GPL, version 2.  See
# the COPYING file in the top-level directory.

# Set to the name of your bridge
BRIDGE=qemu-br0

# Network information
NETWORK=192.168.53.0
NETMASK=255.255.255.0
GATEWAY=192.168.53.1
DHCPRANGE=192.168.53.2,192.168.53.254

# Optionally parameters to enable PXE support
TFTPROOT=
BOOTP=

do_brctl() {
    brctl "$@"
}

do_ifconfig() {
    ifconfig "$@"
}

do_dd() {
    dd "$@"
}

do_iptables_restore() {
    iptables-restore -n "$@"
}

do_dnsmasq() {
    dnsmasq "$@"
}

check_bridge() {
    if do_brctl show | grep "^$1" > /dev/null 2> /dev/null; then
	return 1
    else
	return 0
    fi
}

create_bridge() {
    do_brctl addbr "$1"
    do_brctl stp "$1" off
    do_brctl setfd "$1" 0
    do_ifconfig "$1" "$GATEWAY" netmask "$NETMASK" up
}

enable_ip_forward() {
    echo 1 | do_dd of=/proc/sys/net/ipv4/ip_forward > /dev/null
}

add_filter_rules() {

iptables -tnat -N QEMU-POSTROUTING-$BRIDGE
iptables -tnat -F QEMU-POSTROUTING-$BRIDGE
iptables -tnat -A POSTROUTING -j QEMU-POSTROUTING-$BRIDGE

# postrouting rules for qemu
iptables -tnat -A QEMU-POSTROUTING-$BRIDGE \
		-s $NETWORK/$NETMASK -j MASQUERADE 

iptables -tfilter -N QEMU-F-INPUT-$BRIDGE
iptables -tfilter -F QEMU-F-INPUT-$BRIDGE
iptables -tfilter -A INPUT -j QEMU-F-INPUT-$BRIDGE

iptables -tfilter -A QEMU-F-INPUT-$BRIDGE -i $BRIDGE -p tcp -m tcp --dport 67 -j ACCEPT 
iptables -tfilter -A QEMU-F-INPUT-$BRIDGE -i $BRIDGE -p udp -m udp --dport 67 -j ACCEPT 
iptables -tfilter -A QEMU-F-INPUT-$BRIDGE -i $BRIDGE -p tcp -m tcp --dport 53 -j ACCEPT 
iptables -tfilter -A QEMU-F-INPUT-$BRIDGE -i $BRIDGE -p udp -m udp --dport 53 -j ACCEPT 

iptables -tfilter -N QEMU-F-FORWARD-$BRIDGE
iptables -tfilter -F QEMU-F-FORWARD-$BRIDGE
iptables -tfilter -A FORWARD -j QEMU-F-FORWARD-$BRIDGE

iptables -tfilter -A QEMU-F-FORWARD-$BRIDGE -i $1 -o $1 -j ACCEPT 
iptables -tfilter -A QEMU-F-FORWARD-$BRIDGE -s $NETWORK/$NETMASK -i $BRIDGE -j ACCEPT 
iptables -tfilter -A QEMU-F-FORWARD-$BRIDGE -d $NETWORK/$NETMASK -o $BRIDGE -m state --state RELATED,ESTABLISHED -j ACCEPT 
}


start_dnsmasq() {
    do_dnsmasq \
	--strict-order \
	--except-interface=lo \
	--interface=$BRIDGE \
	--listen-address=$GATEWAY \
	--bind-interfaces \
	--dhcp-range=$DHCPRANGE \
	--conf-file="" \
	--pid-file=/var/run/qemu-dnsmasq-$BRIDGE.pid \
	--dhcp-leasefile=/var/run/qemu-dnsmasq-$BRIDGE.leases \
	--dhcp-no-override \
	${TFTPROOT:+"--enable-tftp"} \
	${TFTPROOT:+"--tftp-root=$TFTPROOT"} \
	${BOOTP:+"--dhcp-boot=$BOOTP"}
}

setup_bridge_nat() {
    if check_bridge "$1" ; then
	create_bridge "$1"
	enable_ip_forward
	add_filter_rules "$1"
	start_dnsmasq "$1"
    fi
}

setup_bridge_vlan() {
    if check_bridge "$1" ; then
	create_bridge "$1"
	start_dnsmasq "$1"
    fi
}

setup_bridge_nat "$BRIDGE"

if test "$1" ; then
    do_ifconfig "$1" 0.0.0.0 up
    do_brctl addif "$BRIDGE" "$1"
fi
